package symmetric;

import java.security.Key;
import java.security.NoSuchAlgorithmException;

import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

import util.CryptoTools;

public class DES_Custom {

	/**
	 * Question5 of activity B
	 * The encryption works as follows: CT = E[~K, E(K, PT)]
	 * In other words, she encrypts the PT with key K and then encrypts with again with the negation of key K. 
	 * She uses the DES encryption scheme with the ECB mode of operation.
	 * 
	 *  Breaking the cipher effectively requires two operations. 
	 *  For the first step you need to decrypt using the negation of key K. That will then require you to decrypt E(K,PT). 
	 *  You can then just decrypt that like anything else. 
	 * @param args
	 * @throws Exception
	 */
	public static void main(String[] args) throws Exception{
		
		byte[] ky = CryptoTools.hexToBytes("746F676574686572");
		
		byte[] keyNegated = CryptoTools.hexToBytes("746F676574686572");
		for(int i=0;i<keyNegated.length;i++) {
			byte bitComp = (byte) ~keyNegated[i];
			keyNegated[i] = bitComp;
		}
		
		Key firstKey = new SecretKeySpec(ky, "DES");
		Key secondKey = new SecretKeySpec(keyNegated, "DES");
		Cipher cipher = Cipher.getInstance("DES/ECB/NoPadding");
		
	
	
		byte[] ct = CryptoTools.hexToBytes("63DA3351A061DB65BCDBFEF49C1AAB08522A51A222DC7DA30CE71ADD0F"
				+ "CB6AF72EA8FF4953EFA9518334E1813B1C9A69E00535C94A76EE0FD1B569687D512BE175B138FBFF8122"
				+ "DF707DDC6F8B3E82608DFB23FD3C9E3D33A99CF43918B75A6E966B106CD429422734EE2F35207D8B2F4A1"
				+ "77456B055F80E1FE0185752BF1FDD91C1FC86278AE5B061981B339468D5A24589C1E2EAAFF7A90E74759F56"
				+ "BFE1C0843F1D91C2C8B81BAA58090695C2F5FADBE27B175BC1AD681569B2CEE28DBC97F1E1FAD735E10C0"
				+ "E560CCB45A118651F288D8D51830560E7303B39249A2487D77F7A340BDF4518465D97B7B4122887F744AA"
				+ "0E9FB6305A8A31C645883D58820C5A66A8C87EA822C0F86EE64A4704EB9A9554EC4EF854EEA5D0C7EC996E2"
				+ "006923F339D36B35DEB915BB9D27B000DA81A6D78392FBB299B79920D2311D426CC720AF7637EDFCABF180511"
				+ "29C3F66404F3A9A27287C626787AD9E47104ACD724CA0CE73A48F81F445C7770B1CE4B1736B0A4402B8C4CDEC3"
				+ "C3159162B9DD28A5C5418F2F4D107B133665793A3DF5C2FD599E76F9390D002F0B18D6E545916928A2E3DDD964"
				+ "63045B5B8D7D16E47397881670CB75BC99F15E2F9F9036950CEC8F6C71556F02842466B764AA69F7AAAEB439F34AA98C148C9BBB2E8465C2DC5A61ED84D80AC0AB75721D1670EE2505BF395550EB2A76E2EB963219D036203B7822A08EBB759B429EB26C5AA04696374B7EE0EC5BE1325CAB4A4CCC725B17DA5A4F37DAC15CDD1A34997A56E749F334DEB48B13DFBEB1AB8AF142D090D57C2BF7647FAD932EDE1E63792E40E299B1DB71AF95ED1CD58C52108C20E6FB291DC931BE19E6FDFFC09E7004BE9EC7EC3A0F7C9C294CC6A32CAFCE4F7B937E3A973CEB56CCE19D8878CAB7576BF138CB73CA07F5DC43E9C4B7D915D11AB770C7A9662502602A497C4E8CB633FA259A18564C539CD6D4FC1919A0C9745935A6374A5B1D534937D397F796A6A54653C4D3E8191EE91149BAF20A5E4D6272CAAC39CE39E5202959EB66B3973250274146151AEDCCA794388132DCE7C18E42FDE10E69ACF69593F3676864E5E1E2CCAC900F3DE4CEC3325B08983BA30668F1043A44AE52DDBAAF34BF0F22E0B3FACCF51587A237AE0F40982529AF534EEAD02003D95CD8B62FBEB6E4AEE8394DECC3C721B34BA79F57151DCFA058A693299DE262F2B57453C50C2FA87F778B30B84429203C00DF57BB4D3F7EFD07F76D4A68F469CD6E020A0F82656792020027F61FE60AB5A8C028F18C269CC74C7DE75C0AF63D87E01A8EBD8F8EEC59A1BA02E0EBE0A2C9621AD6F2C2CF35092AF0CDF5740C118A87E66DA60628B4F2871D02CBF2A4AA8B48E93D6ED14B0E8AC1C5CCC6BD664DFD138CFB6CD01A915737EF7B4D7E6E4EFB2E60754CCBC3F1C1421C5E63CB80286F0B390C2F09F709C661AA4D27A96A40FB4F3B340E72156903C2E2EC0FE949B186A067FA6609F9DE98B2BC023894650E0312EAD134616E36816F3D5ADF8F44E91C1A09C327B230AF407F33A154209576F42B40673C8A004B70C702A37F17070D84B720587116B75BA5F6F8CB9814BF1CBDE9703AB53A");
		
		//secondKey is the negated key
		cipher.init(Cipher.DECRYPT_MODE, secondKey);
		byte[] firstLevelDone = cipher.doFinal(ct);
		
		cipher.init(Cipher.DECRYPT_MODE, firstKey);
		byte[] bk = cipher.doFinal(firstLevelDone);
		System.out.println("BK = " + new String(bk) + "<");

	}

}
